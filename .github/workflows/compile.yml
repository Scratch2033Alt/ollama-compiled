# Name of the workflow as it appears in the GitHub Actions UI
name: Build Ollama and Commit

# Defines when the workflow should run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Defines a single job named 'build-and-commit'
jobs:
  build-and-commit:
    # Specifies the type of runner to use for the job
    runs-on: ubuntu-latest

    # Permissions needed for this workflow.
    # 'contents: write' is crucial for committing changes back to the repository.
    permissions:
      contents: write

    # Steps define a sequence of tasks to be executed as part of the job
    steps:
      # Step 1: Checks out your repository under $GITHUB_WORKSPACE
      # This is necessary to allow the workflow to commit changes back to your repo.
      - name: Checkout current repository
        uses: actions/checkout@v4

      # Step 2: Sets up the Go environment
      # Specifies the Go version to use for building Ollama.
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # You can specify a different Go version if needed

      # Step 3: Clone, Build, and Move Ollama
      # This step combines cloning the Ollama repository, changing into its directory,
      # building the executable, and then moving the built executable.
      # Combining these into a single 'run' block ensures that the 'cd' command
      # persists for the subsequent commands within this step.
      - name: Clone, Build, and Move Ollama
        run: |
          # Clone the Ollama repository into a new directory named 'ollama-source'
          # This keeps the cloned source separate from your repository's root.
          git clone https://github.com/ollama/ollama ollama-source

          # Change the current working directory to the cloned Ollama source.
          cd ollama-source

          # Build the Ollama executable. The output (typically named 'ollama')
          # will be created in the current directory (ollama-source).
          go build

          # Create a 'bin' directory in the root of your repository if it doesn't exist.
          # The 'mkdir -p' command ensures that parent directories are also created if needed.
          mkdir -p ../bin

          # Move the built 'ollama' executable from 'ollama-source/' to 'bin/'
          # in the root of your repository.
          mv ollama ../bin/ollama

      # Step 4: Configures Git user details for the commit
      # These details will appear as the committer in your Git history.
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Step 5: Adds the built executable to the Git staging area and commits it
      # The 'git add bin/ollama' specifically stages the new executable.
      # The '|| echo "No changes to commit"' part prevents the workflow from failing
      # if the executable hasn't changed since the last commit.
      - name: Add and commit built executable
        run: |
          git add bin/ollama
          git commit -m "Build: Ollama executable from latest source" || echo "No changes to commit"

      # Step 6: Pushes the committed changes back to your repository
      # This pushes the new or updated executable to your default branch.
      - name: Push changes
        run: git push
